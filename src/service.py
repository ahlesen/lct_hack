"""–ú–µ—Ç–æ–¥—ã API."""

import os
from pathlib import Path
from typing import List

import torch
from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException, Request, Response, status
from fastapi.encoders import jsonable_encoder
from fastapi.responses import JSONResponse

from src.base_logger import logger
from src.elastic.elastic_api import ElasticIndex
from src.engine.config import ConfigVideoProcessor
from src.engine.embedding import Embedding
from src.engine.model import VideoProcessor
from src.engine.morph import Morph
from src.index import index_one_document
from src.schemas import VideoInsertInput, VideoSearchInput, VideoSearchResult
from src.search import search_documents  # noqa: F401

current_file_path = Path(__file__)
dotenv_path = current_file_path.parent.parent / '.env'
load_dotenv(dotenv_path)

DEVICE = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
CONFIG = ConfigVideoProcessor()


processor_model = VideoProcessor(config=CONFIG, device=DEVICE)
embedding_model = Embedding(device=DEVICE)
morph_model = Morph()
elastic_client = ElasticIndex(
    index_name=os.environ.get("INDEX_NAME"),
    elastic_host_port=os.environ.get("ELASTIC_PORT"),  # –£–±–µ–¥–∏—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    elastic_password=os.environ.get("ELATIC_PASSWORD"),
    elastic_ca_certs_path="./src/elastic/certs/http_ca.crt",
)

suggest_elastic_client = ElasticIndex(
    index_name=os.environ.get("SUGGEST_INDEX_NAME"),
    elastic_host_port=os.environ.get("ELASTIC_PORT"),  # –£–±–µ–¥–∏—Å—å —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    elastic_password=os.environ.get("ELATIC_PASSWORD"),
    elastic_ca_certs_path="./src/elastic/certs/suggest_http_ca.crt",
)  # –ù–ê–ü–ò–°–ê–¢–¨ –†–£–ß–ö–£ –°–ê–î–ñ–ï–°–¢–ï–†–ê

router = APIRouter()


@router.get(
    "/monitoring/status",
    response_class=Response,
    status_code=status.HTTP_200_OK,
    include_in_schema=False,
    responses={
        200: {"description": "Success"},
        500: {"description": "Internal server error"},
    },
)
async def liveness_probe(_: Request) -> JSONResponse:
    """–¢–æ—á–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–∑–Ω–∏ –¥–ª—è Kubernetes.

    :return: JSON-–æ—Ç–≤–µ—Ç, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤.
    """
    return JSONResponse(jsonable_encoder({"alive": True}), status_code=status.HTTP_200_OK)


@router.get(
    "/monitoring/ready",
    response_class=Response,
    status_code=status.HTTP_200_OK,
    include_in_schema=False,
    responses={
        200: {"description": "Success"},
        500: {"description": "Internal server error"},
    },
)
async def readiness_probe(_: Request) -> JSONResponse:
    """–¢–æ—á–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è Kubernetes.

    :return: JSON-–æ—Ç–≤–µ—Ç, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤.
    """
    return JSONResponse(jsonable_encoder({"ready": True}), status_code=status.HTTP_200_OK)


@router.post(
    "/add_video_to_index",
    tags=["ADD2INDEX"],
    summary="Add video to index",
    description="–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∏–Ω–¥–µ–∫—Å",
)
async def add_video_to_index(input: VideoInsertInput):
    """–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –∏–Ω–¥–µ–∫—Å.

    :param input: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.
    """
    # try:
    ## —ç—Ç–æ –ø—Ä–æ–±–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API               # noqa: E266
    # pred = await processor_model.process_video_from_link(input.video_link)
    # result =  VideoInsertOutput(
    #     caption = pred['captions'],
    #     transcription = pred['transcription'],
    #     shazam_title = pred['shazam_title'],
    #     shazam_subtitle = pred['shazam_subtitle'],
    #     shazam_url = pred['shazam_url'],
    # )
    # return result
    # —á—Ç–æ –Ω–∞–¥–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –∂–¥–µ–º
    print(input)
    document_res = await index_one_document(
        input=input,
        elastic_client=elastic_client,
        video_processor=processor_model,
        embedding_model=embedding_model,
        morph_model=morph_model,
    )
    return document_res
    # except Exception as e:
    #     logger.error(f"Error during add_video_to_index: {e}")
    #     raise HTTPException(status_code=500, detail="add_video_to_index failed")


@router.post(
    "/search",
    tags=["SEARCH"],
    summary="Search by query",
    description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É",
)
def make_search(input: VideoSearchInput):
    # def make_search(input: VideoSearchInput) -> List[VideoSearchResult]:
    """–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

    :param input: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
    :return: –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞.
    """
    # try:
    # res_example = [
    #     {
    #         "video_link": "https://cdn-st.rutubelist.ru/media/87/43/b11df3f344d0af773aac81e410ee/fhd.mp4",  # noqa: E501
    #         "description": "#–Ω–∞—Ä–µ–∑–∫–∏—Å—Ç—Ä–∏–º–æ–≤ , #dota2 , #cs2 , #fifa23 , #minecraft , #–º–∞–π–Ω–∫—Ä–∞—Ñ—Ç , #–≥–µ–Ω—à–∏–Ω , #genshin",  # noqa: E501
    #     },
    #     {
    #         "video_link": "https://cdn-st.rutubelist.ru/media/39/6c/b31bc6864bef9d8a96814f1822ca/fhd.mp4",  # noqa: E501
    #         "description": "ü§´–ù–ï –í–í–û–î–ò –≠–¢–£ –ö–û–ú–ê–ù–î–£ –í –†–û–ë–õ–û–ö–° ! #shorts #roblox #—Ä–æ–±–ª–æ–∫—Å",
    #     },
    #     {
    #         "video_link": "https://cdn-st.rutubelist.ru/media/e9/e0/b47a9df14a5e97942715e5e705c0/fhd.mp4",  # noqa: E501
    #         "description": "#boobs , #–∫—Ä–∞—Å–∏–≤—ã–µ–¥–µ–≤—É—à–∫–∏ , #ass",
    #     },
    # ]
    # return res_example
    # —á—Ç–æ –Ω–∞–¥–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ
    docs = search_documents(
        user_query=input.query, elastic_client=elastic_client, embedding_model=embedding_model
    )
    return docs
    # except Exception as e:
    #     logger.error(f"Error during Search: {e}")
    #     raise HTTPException(status_code=500, detail="Search failed")
